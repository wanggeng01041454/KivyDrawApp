<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2041px" preserveAspectRatio="none" style="width:1857px;height:2041px;background:#FFFFFF;" version="1.1" viewBox="0 0 1857 2041" width="1857px" zoomAndPan="magnify"><defs/><g><rect fill="none" height="29.0679" id="_title" style="stroke:none;stroke-width:1.0;" width="175" x="834" y="5"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="165" x="839" y="24.9659">kivy中asyncio的使用模式</text><!--MD5=[d46ddb20446159e3bd67d3bb8e28c036]
cluster use_case--><g id="cluster_use_case"><rect fill="none" height="1536.75" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:1.0;" width="1237" x="614" y="498.3079"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="112" x="1176.5" y="515.2739">应用中的一个场景</text></g><!--MD5=[e78e0324c5080222b50adb1fa1a61c07]
entity readme--><g id="elem_readme"><path d="M1059,546.8079 L1059,865.939 A2.5,2.5 0 0 0 1061.5,868.439 L1540.5,868.439 A2.5,2.5 0 0 0 1543,865.939 L1543,554.3079 L1533,544.3079 L1061.5,544.3079 A2.5,2.5 0 0 0 1059,546.8079 " fill="#F1F1F1" style="stroke:#181818;stroke-width:0.5;"/><path d="M1533,544.3079 L1533,551.8079 A2.5,2.5 0 0 0 1535.5,554.3079 L1543,554.3079 " fill="#F1F1F1" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="1069" y="569.2739">场景说明：用户点击一个按钮，触发以下事件：</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="432" x="1069" y="588.3418">1. 创建一个http请求协程， 并将该协程加入到 globaltaskgroup 中；</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="1069" y="607.4097">2. 对外发射一个事件，通知界面开始了网络请求；</text><line style="stroke:#181818;stroke-width:1.0;" x1="1060" x2="1542" y1="611.5117" y2="611.5117"/><line style="stroke:#181818;stroke-width:1.0;" x1="1060" x2="1542" y1="613.5117" y2="613.5117"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="1069" y="630.4776">kivy中的 绑定事件和发射事件</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="40" x="1069" y="647.5747"># ...</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="72" x="1069" y="663.8716"># 注册事件</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="456" x="1069" y="680.1685">self.register_event_type("on_send_picture_request_event")</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="464" x="1069" y="696.4653">self.register_event_type("on_recv_picture_response_event")</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="40" x="1069" y="712.7622"># ...</text><line style="stroke:#181818;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="1060" x2="1542" y1="720.064" y2="720.064"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="72" x="1069" y="737.0591"># 发射事件</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="40" x="1069" y="753.356"># ...</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="264" x="1069" y="769.6528"># 4. 发射事件，通知界面显示等待对话框</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="368" x="1069" y="785.9497">self.dispatch("on_send_picture_request_event")</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="40" x="1069" y="802.2466"># ...</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="212" x="1069" y="818.5435"># 处理好接收图片后，发射事件；</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="170" x="1069" y="834.8403"># 这个处理是在回调函数中</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="416" x="1069" y="851.1372">self.dispatch("on_recv_picture_response_event", img)</text></g><!--MD5=[20b6dc911f1d46aed279b821c9dfd66d]
entity btn--><g id="elem_btn"><rect fill="#F1F1F1" height="39.0679" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="76" x="1263" y="1051.6679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="56" x="1273" y="1076.6339">点击按钮</text></g><!--MD5=[fcd7b9b58b982891a4c065296d4ac5c8]
entity http--><g id="elem_http"><rect fill="#F1F1F1" height="677.1202" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="972" x="646" y="1169.7379"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="84" x="656" y="1194.7039">http请求协程</text><line style="stroke:#181818;stroke-width:1.0;" x1="647" x2="1617" y1="1198.8058" y2="1198.8058"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="300" x="656" y="1215.801"># 实际代码中使用回调函数处理收到的http应答</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="776" x="656" y="1232.0978">def process_manual_picture(self, prompt: str, base64_img: str, ai_pic_cb: AiPictureCallbackFunc):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="688" y="1248.3947">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="548" x="688" y="1264.6916">使用AI处理人工绘制的图片数据，在成功处理后，会触发 on_ai_picture_event 事件</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="162" x="688" y="1280.9885">@param prompt: 提示词</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="298" x="688" y="1297.2853">@param base64_img: base64编码的图片数据</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="688" y="1313.5822">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="270" x="688" y="1329.8791"># 如果有正在等待的AI处理图片，则不处理</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="544" x="688" y="1346.176">if self._request_task is not None and not self._request_task.done():</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="168" x="720" y="1362.4728"># todo, debug 打印输出</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="48" x="720" y="1378.7697">return</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="920" x="688" y="1395.0666">self._request_task = self.global_aio_tg.create_task(self._inner_deal_manual_picture(prompt, base64_img, ai_pic_cb))</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="32" x="688" y="1411.3635">pass</text><line style="stroke:#181818;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="647" x2="1617" y1="1418.6652" y2="1418.6652"/><text fill="#FF0000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="258" x="656" y="1437.6311">_inner_deal_manual_picture函数的定义</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="856" x="656" y="1454.7282">async def _inner_deal_manual_picture(self, prompt: str, base64_img: str, ai_pic_cb: AiPictureCallbackFunc):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="688" y="1471.0251">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="154" x="688" y="1487.322">处理人工绘制的图片数据</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="162" x="688" y="1503.6189">@param prompt: 提示词</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="298" x="688" y="1519.9157">@param base64_img: base64编码的图片数据</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="688" y="1536.2126">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="212" x="688" y="1552.5095"># 如果未建立连接，则先建立连接</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="224" x="688" y="1568.8064">if self._session_id is None:</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="224" x="720" y="1585.1032">await self._connect_server()</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="0" x="656" y="1601.4001"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="220" x="688" y="1617.697"># 发送图片数据, todo: 错误处理</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="448" x="688" y="1633.9939">serial_no = await self._send_picture(prompt, base64_img)</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="214" x="688" y="1650.2907"># 轮询，查询AI处理后的图片数据</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="88" x="688" y="1666.5876">while True:</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="292" x="720" y="1682.8845"># 查询AI处理后的图片数据, todo: 错误处理</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="384" x="720" y="1699.1814">ai_img = await self._query_ai_picture(serial_no)</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="176" x="720" y="1715.4782">await asyncio.sleep(1)</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="198" x="720" y="1731.7751"># 收到图片数据，调用回调函数</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="136" x="720" y="1748.072">ai_pic_cb(ai_img)</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="40" x="720" y="1764.3689">break</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="0" x="656" y="1780.6657"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="142" x="688" y="1796.9626"># 协程完成，清除任务</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="200" x="688" y="1813.2595">self._request_task = None</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="32" x="688" y="1829.5564">pass</text></g><!--MD5=[6a2c6de5adc257b610ecdfdd966dbbf1]
entity begin_event--><g id="elem_begin_event"><rect fill="#F1F1F1" height="66.1358" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="173" x="1653.5" y="1475.2279"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="1663.5" y="1500.1939">网络请求开始事件</text><line style="stroke:#181818;stroke-width:1.0;" x1="1654.5" x2="1825.5" y1="1504.2958" y2="1504.2958"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="1663.5" y="1523.2618">ui协程中直接发射了事件</text></g><!--MD5=[c7d990ef187a094ef4424aa018ec010d]
entity end_envent--><g id="elem_end_envent"><rect fill="#F1F1F1" height="85.2038" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="314" x="975" y="1925.8579"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="985" y="1950.8239">网络请求完成事件</text><line style="stroke:#181818;stroke-width:1.0;" x1="976" x2="1288" y1="1954.9258" y2="1954.9258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="985" y="1973.8918">实际实现中，http协程在完成时调用回调函数，</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="985" y="1992.9597">回调函数中发射事件</text></g><!--MD5=[aa89ae621ac07592b2a333920d00b686]
entity globaltaskgroup--><g id="elem_globaltaskgroup"><rect fill="#F1F1F1" height="278.0115" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="548" x="131" y="47.0679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="141" y="72.0339">globaltaskgroup.py</text><line style="stroke:#181818;stroke-width:1.0;" x1="132" x2="678" y1="76.1358" y2="76.1358"/><line style="stroke:#181818;stroke-width:1.0;" x1="132" x2="678" y1="78.1358" y2="78.1358"/><ellipse cx="146.5" cy="91.7038" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="154" y="95.1018">定义全局的 asyncio.TaskGroup 对象</text><ellipse cx="146.5" cy="110.7717" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="154" y="114.1697">该 TaskGroup 用于管理所有要出现的协程</text><ellipse cx="146.5" cy="129.8396" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="154" y="133.2376">TaskGroup 对象要使用单例模式</text><ellipse cx="146.5" cy="148.9075" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="154" y="152.3055">本文件的逻辑层级高于 main.py</text><line style="stroke:#181818;stroke-width:1.0;" x1="132" x2="678" y1="160.4075" y2="160.4075"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="320" x="141" y="177.4026"># SingletonMeta 是一个单例修饰器meataclass</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="528" x="141" y="193.6995">class GlobalTaskGroup(asyncio.TaskGroup, metaclass=SingletonMeta):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="173" y="209.9964">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="112" x="173" y="226.2932">全局的协程管理器</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="173" y="242.5901">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="128" x="173" y="258.887">def abort(self):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="128" x="205" y="275.1839">super()._abort()</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="32" x="205" y="291.4807">pass</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="32" x="173" y="307.7776">pass</text></g><!--MD5=[53ccf4b3ee6cf4337a0ab93ac09644f3]
entity main--><g id="elem_main"><rect fill="#F1F1F1" height="568.5842" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="580" x="7" y="422.0779"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="54" x="17" y="447.0439">main.py</text><line style="stroke:#181818;stroke-width:1.0;" x1="8" x2="586" y1="451.1458" y2="451.1458"/><line style="stroke:#181818;stroke-width:1.0;" x1="8" x2="586" y1="453.1458" y2="453.1458"/><ellipse cx="22.5" cy="466.7138" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="30" y="470.1118">主程序入口, 同时也是协程的启动点</text><ellipse cx="22.5" cy="485.7817" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#FF0000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="544" x="30" y="489.1797">创建 Kivy App对象，将该对象的 async_run() 方法作为协程添加到 globaltaskgroup 中</text><ellipse cx="22.5" cy="504.8496" fill="#000000" rx="2.5" ry="2.5" style="stroke:#000000;stroke-width:0.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="30" y="508.2476">启动 globaltaskgroup, 并等待其结束</text><line style="stroke:#181818;stroke-width:1.0;" x1="8" x2="586" y1="516.3496" y2="516.3496"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="96" x="17" y="533.3447"># 定义app对象</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="232" x="17" y="549.6416">class MainApplication(MDApp):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="128" x="49" y="565.9385">def build(self):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="104" x="81" y="582.2353"># ... 省略代码</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="0" x="17" y="598.5322"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="436" x="49" y="614.8291"># 这个函数很重要，它保证了界面协程退出时，所有的协程都会被结束</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="504" x="49" y="631.126">async def async_run_wrapper(self, task_group: GlobalTaskGroup):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="81" y="647.4228">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="158" x="81" y="663.7197">包装 async_run 方法，</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="268" x="81" y="680.0166">在UI协程结束后，直接结束所有在执行协程</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="81" y="696.3135">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="328" x="81" y="712.6103">await self.async_run(async_lib='asyncio')</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="282" x="81" y="728.9072"># 显示协程结束后，直接结束所有在执行协程</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="144" x="81" y="745.2041">task_group.abort()</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="0" x="17" y="761.501"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="520" x="49" y="777.7978">async def run_with_asyncio_tg(self, task_group: GlobalTaskGroup):</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="81" y="794.0947">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="256" x="81" y="810.3916">Run the application with asyncio</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="492" x="81" y="826.6885">使用一个TaskGroup来管理所有的任务，在运行中，允许增加新的临时协程任务</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="24" x="81" y="842.9853">"""</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="176" x="81" y="859.2822">async with task_group:</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="310" x="113" y="875.5791"># 添加 MDApp的 async_run 到 TaskGroup 中</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="464" x="113" y="891.876">task_group.create_task(self.async_run_wrapper(task_group))</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="0" x="17" y="908.1728"/><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="208" x="17" y="924.4697"># 运行包含了界面的 TaskGroup</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="208" x="17" y="940.7666">if __name__ == '__main__':</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="176" x="49" y="957.0635">tg = GlobalTaskGroup()</text><text fill="#000000" font-family="monospace" font-size="14" lengthAdjust="spacing" textLength="432" x="49" y="973.3603">asyncio.run(MainApplication().run_with_asyncio_tg(tg))</text></g><!--MD5=[010962bbd1cc7f20702eeeb6e81c7585]
link readme to btn--><!--MD5=[aba79f0314d9b62db3092b1488f2fc9a]
link btn to http--><g id="link_btn_http"><path codeLine="155" d="M1293.63,1091.1779 C1287.32,1107.4179 1277.38,1133.0179 1265.45,1163.7379 " fill="none" id="btn-to-http" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1263.74,1168.1179,1270.7085,1161.158,1265.5378,1163.4523,1263.2435,1158.2816,1263.74,1168.1179" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="26" x="1281" y="1135.6349">创建</text></g><!--MD5=[2f07a618ff719aba8da98242965a0022]
link btn to begin_event--><g id="link_btn_begin_event"><path codeLine="156" d="M1339.42,1072.1879 C1408.42,1074.2979 1553.77,1088.7779 1636,1169.7379 C1719.35,1251.7979 1736.23,1398.9679 1739.42,1468.6679 " fill="none" id="btn-to-begin_event" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1739.61,1473.2579,1743.2471,1464.1052,1739.4102,1468.2619,1735.2535,1464.425,1739.61,1473.2579" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="26" x="1592" y="1135.6349">发射</text></g><!--MD5=[09625d4732bae84955e10dd021d13f64]
link http to end_envent--><g id="link_http_end_envent"><path codeLine="157" d="M1132,1847.0779 C1132,1874.5479 1132,1899.3079 1132,1919.1279 " fill="none" id="http-to-end_envent" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1132,1923.8679,1136,1914.8679,1132,1918.8679,1128,1914.8679,1132,1923.8679" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="91" x="1133" y="1891.7549">请求完成时发射</text></g><!--MD5=[e948dfa34e2c87c0f015eee256b527ae]
reverse link globaltaskgroup to main--><g id="link_globaltaskgroup_main"><path codeLine="161" d="M354.15,331.4779 C351.93,339.4179 349.86,347.3279 348,355.0779 C342.79,376.7479 338.04,399.2979 333.72,422.0479 " fill="none" id="globaltaskgroup-backto-main" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="355.46,326.8479,349.1473,334.4077,354.0902,331.6566,356.8413,336.5994,355.46,326.8479" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="159" x="349" y="369.9749">将界面协程加入 TaskGroup</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="94" x="390.5" y="387.6809">启动 TaskGroup</text></g><!--MD5=[c8930378af640b6f2bd4de41b21d8098]
reverse link globaltaskgroup to use_case--><g id="link_globaltaskgroup_use_case"><path codeLine="164" d="M551.17,330.3879 C572.72,358.7379 592,389.7779 605,422.0779 C610.7925,436.4779 614.7638,460.9473 617.4592,489.6579 C617.6277,491.4523 617.7912,493.2633 617.9498,495.0894 C618.0291,496.0025 618.1072,496.9194 618.1841,497.8398 " fill="none" id="globaltaskgroup-backto-use_case" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="548.33,326.6979,550.6502,336.2696,551.3799,330.66,556.9895,331.3897,548.33,326.6979" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="159" x="591" y="378.9749">将任务协程加入 TaskGroup</text></g><!--MD5=[f58ca3b0b85b9d6a427c9c3003178943]
@startuml 1.kivy中asyncio的使用模式 
    title
        kivy中asyncio的使用模式
    end title

    rectangle globaltaskgroup [
        globaltaskgroup.py
        ====
        * 定义全局的 asyncio.TaskGroup 对象
        * 该 TaskGroup 用于管理所有要出现的协程
        * TaskGroup 对象要使用单例模式
        * 本文件的逻辑层级高于 main.py
        - - - -
        <code>
        # SingletonMeta 是一个单例修饰器meataclass
        class GlobalTaskGroup(asyncio.TaskGroup, metaclass=SingletonMeta):
            """
            全局的协程管理器
            """
            def abort(self):
                super()._abort()
                pass
            pass
        </code>
    ]

    rectangle main [
        main.py
        ====
        * 主程序入口, 同时也是协程的启动点
        * <color:red>创建 Kivy App对象，将该对象的 async_run() 方法作为协程添加到 globaltaskgroup 中</color>
        * 启动 globaltaskgroup, 并等待其结束
        - - - -
        <code>
        # 定义app对象
        class MainApplication(MDApp):
            def build(self):
                # ... 省略代码

            # 这个函数很重要，它保证了界面协程退出时，所有的协程都会被结束
            async def async_run_wrapper(self, task_group: GlobalTaskGroup):
                """
                包装 async_run 方法，
                在UI协程结束后，直接结束所有在执行协程
                """
                await self.async_run(async_lib='asyncio')
                # 显示协程结束后，直接结束所有在执行协程
                task_group.abort()

            async def run_with_asyncio_tg(self, task_group: GlobalTaskGroup):
                """
                Run the application with asyncio
                使用一个TaskGroup来管理所有的任务，在运行中，允许增加新的临时协程任务
                """
                async with task_group:
                    # 添加 MDApp的 async_run 到 TaskGroup 中
                    task_group.create_task(self.async_run_wrapper(task_group))

        # 运行包含了界面的 TaskGroup
        if __name__ == '__main__':
            tg = GlobalTaskGroup()
            asyncio.run(MainApplication().run_with_asyncio_tg(tg))
        </code>
    ]

    rectangle "应用中的一个场景" as use_case {
        file readme [
            场景说明：用户点击一个按钮，触发以下事件：
            1. 创建一个http请求协程， 并将该协程加入到 globaltaskgroup 中；
            2. 对外发射一个事件，通知界面开始了网络请求；
            ====
            kivy中的 绑定事件和发射事件
            <code>
            # ...
            # 注册事件
            self.register_event_type("on_send_picture_request_event")
            self.register_event_type("on_recv_picture_response_event")
            # ...
            </code>
            ....
            <code>
            # 发射事件
            # ...
            # 4. 发射事件，通知界面显示等待对话框
            self.dispatch("on_send_picture_request_event")
            # ...
            # 处理好接收图片后，发射事件；
            # 这个处理是在回调函数中
            self.dispatch("on_recv_picture_response_event", img)
            </code>
        ]

        rectangle btn [
            点击按钮
        ]
        rectangle http [
            http请求协程
            - - - -
            <code>
            # 实际代码中使用回调函数处理收到的http应答
            def process_manual_picture(self, prompt: str, base64_img: str, ai_pic_cb: AiPictureCallbackFunc):
                """
                使用AI处理人工绘制的图片数据，在成功处理后，会触发 on_ai_picture_event 事件
                @param prompt: 提示词
                @param base64_img: base64编码的图片数据
                """
                # 如果有正在等待的AI处理图片，则不处理
                if self._request_task is not None and not self._request_task.done():
                    # todo, debug 打印输出
                    return
                self._request_task = self.global_aio_tg.create_task(self._inner_deal_manual_picture(prompt, base64_img, ai_pic_cb))
                pass
            </code>
            ....
            <color:red>_inner_deal_manual_picture函数的定义</color>
            <code>
            async def _inner_deal_manual_picture(self, prompt: str, base64_img: str, ai_pic_cb: AiPictureCallbackFunc):
                """
                处理人工绘制的图片数据
                @param prompt: 提示词
                @param base64_img: base64编码的图片数据
                """
                # 如果未建立连接，则先建立连接
                if self._session_id is None:
                    await self._connect_server()

                # 发送图片数据, todo: 错误处理
                serial_no = await self._send_picture(prompt, base64_img)
                # 轮询，查询AI处理后的图片数据
                while True:
                    # 查询AI处理后的图片数据, todo: 错误处理
                    ai_img = await self._query_ai_picture(serial_no)
                    await asyncio.sleep(1)
                    # 收到图片数据，调用回调函数
                    ai_pic_cb(ai_img)
                    break

                # 协程完成，清除任务
                self._request_task = None
                pass
            </code>
        ]
        rectangle begin_event [
            网络请求开始事件
            - - - -
            ui协程中直接发射了事件
        ]
        rectangle end_envent [
            网络请求完成事件
            - - - -
            实际实现中，http协程在完成时调用回调函数，
            回调函数中发射事件
        ]
        readme -[hidden]- btn

        btn - -> http : 创建
        btn - -> begin_event : 发射
        http - -> end_envent : 请求完成时发射
    }


    globaltaskgroup <- - main : 将界面协程加入 TaskGroup     \n 启动 TaskGroup

    globaltaskgroup <- - use_case : 将任务协程加入 TaskGroup
@enduml

PlantUML version 1.2022.7(Tue Aug 23 01:01:30 CST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>